Отчет по реализации прицнципов SOLID в програме SolidHW

Описание реализации принципов в программе 
S - Single Responsibility Принцип единственности отвесвтенности
Классы GameSettings, GuessingGame, ConsoleGameUI, RandomNumberGenerator — каждый отвечает 
только за одну ответственность: настройки, логика игры, UI, генерация чисел соответственно.

O - Open/Closed	Принцип открытости/закрытости 
Все классы легко расширяются: можно добавить новые UI (веб-интерфейс), новые генераторы (например, псевдо-GUID), 
не изменяя старый код.

L - Liskov Substitution Принцип подстановки Лисков 
Интерфейсы IRandomNumberGenerator и IGameUI позволяют использовать любые их реализации 
без нарушения логики GuessingGame.

I - Принцип разделения интерфейса
Интерфейс IGameUI спользует только нужные методы для ввода и вывода чисел по логике игры. 

D - Dependency Inversion Инверсия зависимостей 
GuessingGame зависит от абстракций (IRandomNumberGenerator, IGameUI), 
а не от конкретных реализаций (ConsoleGameUI, RandomNumberGenerator). 

ВЫВОД: Данная реализация программы демонстрирует, как даже в простой программе можно применять принципы SOLID 
для обеспечения гибкости, расширяемости и тестируемости кода. 
Благодаря этому можно: быстро заменить ввод/вывод без изменения логики игры,
писать unit-тесты с заглушками,
масштабировать приложение до GUI или сетевой игры.
более читаемый код 
 
Дополнительно хотел отметить принцип SOLID посзволяет просто изменять добавлять и моденизировать функционал в програмный код, не изменяя смежъные объекты-классы, 
на пример первоначально включил ввод данных диаппазона и количества попыток для работы программы хардкодом, после для добавления функционала настройки и ввода данных поизвел 
изменения всего на 2х классах. ConsoleGameUI, Program  

Коичество потраченого времени на выполнения задания - 8 часов 
